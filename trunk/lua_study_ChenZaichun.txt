$id$

2007-9-24 23:50
* lua所需要注意的，sqrt全局不可见，使用时必须加入math.sqrt

* for循环中var变量（循环变量）是局部可见的，离开for循环则不可用

* for循环中不要修改循环变量的值

* Lua语法要求break和return只能出现在block的结尾一句（也就是说：作为chunk的最后一句，或者在end之前，或者else前，或者until前）

* lua中可以返回多个值:
	第一，当作为表达式调用函数时，有以下几种情况：
		1. 当调用作为表达式最后一个参数或者仅有一个参数时，根据变量个数函数尽可能多地返回多个值，不足补nil，超出舍去。
		2. 其他情况下，函数调用仅返回第一个值（如果没有返回值为nil）
	第二，函数调用作为函数参数被调用时，和多值赋值是相同
	第三，函数调用在表构造函数中初始化时，和多值赋值时相同
	另外，return f()这种类型的返回f()返回的所有值
	可以使用圆括号强制使调用返回一个值
	一个return语句如果使用圆括号将返回值括起来也将导致返回一个值

* Lua语法支持函数调用时实参可以是表的构造

* Lua中的函数是带有词法定界（lexical scoping）的第一类值（first-class values）
	第一类值指：在Lua中函数和其他值（数值、字符串）一样，函数可以被存放在变量中，也可以存放在表中，可以作为函数的参数，还可以作为函数的返回值
	词法定界指：被嵌套的函数可以访问他外部函数中的变量。这一特性给Lua提供了强大的编程能力

* 需要注意的是在声明递归局部函数的方式: 首先申明函数为local，然后再实现，不然的话lua会首先去查找全局函数（因为其并不知道是否为local）

* 不明白状态机（所以对尾调用有点模糊）
2007-9-25 0:47

* 

2007-9-27 22:54

* 不能对一个表的下标域进行排序。在一个表中，所有的下标组成一个集合，但是是无序的。如果需要对其排序，必须将它们复制到一个array然后对这个array排序,eg:
	lines = {
		luaH_set = 10,
		luaH_get = 24,
		luaH_present = 48,
	}
	
	function sortKey (v)
		local array = {}
		for key, value in ipairs(v) do
			table.insert(array, key)
		end
		table.sort(array)

		for i = 1, array.getn() do
			v[array[i]] = v[array[i]]
		end
	end

* Lua中string的操作
	string.len(s)   		返回字符串的长度
	string.rep(s, n)		返回重复n次字符串s的串
	string.lower(s)			返回小写格式(string.upper(s)大写)
	string.sub(s,i,j)		返回s中i到j的子串,索引从1开始，如果为负，则从后往前记（这一点同python）， -1是最后一个，-2是倒数第二个...
	string.char和string.byte	字符与数字之间的转换
		print(string.char(97)) --> a
		i = 99; print(string.char(i, i+1, i+2)) --> cde
		print(string.byte("abc")) --> 97
		print(string.byte("abc", 2)) --> 98
		print(string.byte("abc", -1)) --> 99
	string.format			同C中sprintf
	string.find			查找字符串中的子串的位置，未找到则返回nil
	string.sub(dst,pattern,repstr)	用于查找匹配模式的串，并使用替换串替换
	
	Lua模式中所支持的所有字符类：
		. 任意字符
		%a 字母
		%c 控制字符
		%d 数字
		%l 小写字母
		%p 标点字符
		%s 空白符
		%u 大写字母
		%w 字母和数字
		%x 十六进制数字
		%z 代表0的字符
	上面字符类的大写形式表示小写形式所代表的结合的补集

	%b用来匹配对称的字符。常写为'%bxy', x和y是任意两个不同的字符;x作为匹配的开始,用作为匹配的结束.比如'%b()'匹配'('开始,以')'结束的字符串
	
	Lua中字符串也是一个常量的，一旦赋值，这不允许改变

* 终于知道哑元的意思了：哑元用于函数返回时，把不需要的用哑元表示
	_, nvow = string.gsub(text, "[AEIOUaeiou]", "")
	
* Lua中局部变量仅仅在他们被初始化之后才可见

* 辅助库的luaL_checkstring函数用来检测参数是否为字符串，与luaL_checknumber类似

* 